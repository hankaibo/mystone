import pkg from './package';
import all from './src/all';
import allEqual from './src/allEqual';
import any from './src/any';
import arrayToCSV from './src/arrayToCSV';
import bifurcate from './src/bifurcate';
import bifurcateBy from './src/bifurcateBy';
import chunk from './src/chunk';
import classof from './src/classof';
import compact from './src/compact';
import countBy from './src/countBy';
import countOccurrences from './src/countOccurrences';
import deepFlatten from './src/deepFlatten';
import difference from './src/difference';
import differenceBy from './src/differenceBy';
import differenceWith from './src/differenceWith';
import drop from './src/drop';
import dropRight from './src/dropRight';
import dropRightWhile from './src/dropRightWhile';
import dropWhile from './src/dropWhile';
import everyNth from './src/everyNth';
import filterFalsy from './src/filterFalsy';
import filterNonUnique from './src/filterNonUnique';
import filterNonUniqueBy from './src/filterNonUniqueBy';
import findLast from './src/findLast';
import findLastIndex from './src/findLastIndex';
import flatten from './src/flatten';
import forEachRight from './src/forEachRight';
import groupBy from './src/groupBy';
import head from './src/head';
import indexOfAll from './src/indexOfAll';
import initial from './src/initial';
import initialize2DArray from './src/initialize2DArray';
import initializeArrayWithRange from './src/initializeArrayWithRange';
import initializeArrayWithRangeRight from './src/initializeArrayWithRangeRight';
import initializeArrayWithValues from './src/initializeArrayWithValues';
import initializeNDArray from './src/initializeNDArray';

let mystone = {};

mystone.version = `v${pkg.version}`;

mystone.all = all;
mystone.allEqual = allEqual;
mystone.any = any;
mystone.arrayToCSV = arrayToCSV;
mystone.bifurcate = bifurcate;
mystone.bifurcateBy = bifurcateBy;
mystone.chunk = chunk;
mystone.classof = classof;
mystone.compact = compact;
mystone.countBy = countBy;
mystone.countOccurrences = countOccurrences;
mystone.deepFlatten = deepFlatten;
mystone.difference = difference;
mystone.differenceBy = differenceBy;
mystone.differenceWith = differenceWith;
mystone.drop = drop;
mystone.dropRight = dropRight;
mystone.dropRightWith = dropRightWhile;
mystone.dropWhile = dropWhile;
mystone.everyNth = everyNth;
mystone.filerFalsy = filterFalsy;
mystone.filterNonUnique = filterNonUnique;
mystone.filterNonUniqueBy = filterNonUniqueBy;
mystone.findLast = findLast;
mystone.findLastIndex = findLastIndex;
mystone.flatten = flatten;
mystone.forEachRight = forEachRight;
mystone.groupBy = groupBy;
mystone.head = head;
mystone.indexOfAll = indexOfAll;
mystone.initial = initial;
mystone.initialize2DArray = initialize2DArray;
mystone.initializeArrayWithRange = initializeArrayWithRange;
mystone.initializeArrayWithRangeRight = initializeArrayWithRangeRight;
mystone.initializeArrayWithValues = initializeArrayWithValues;
mystone.initializeNDArray = initializeNDArray;

module.exports = mystone;
